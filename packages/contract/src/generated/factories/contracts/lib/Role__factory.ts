/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type { Role, RoleInterface } from "../../../contracts/lib/Role";

const _abi = [
  {
    inputs: [],
    name: "OPERATOR_ROLE",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "TOKEN_MANAGER_ROLE",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60d6610039600b82828239805160001a60731461002c57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe7300000000000000000000000000000000000000003014608060405260043610603d5760003560e01c8063c2840e60146042578063f5b541a614607a575b600080fd5b60687f74f7a545c65c11839a48d7453738b30c295408df2d944516167556759ddc6d0681565b60405190815260200160405180910390f35b60687f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b9298156fea2646970667358221220b6bedbe5999cca1d3252a1f4939e6c3003bc413b4e46285922263895a728bbf764736f6c63430008090033";

type RoleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RoleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Role__factory extends ContractFactory {
  constructor(...args: RoleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Role> {
    return super.deploy(overrides || {}) as Promise<Role>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Role {
    return super.attach(address) as Role;
  }
  override connect(signer: Signer): Role__factory {
    return super.connect(signer) as Role__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RoleInterface {
    return new utils.Interface(_abi) as RoleInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Role {
    return new Contract(address, _abi, signerOrProvider) as Role;
  }
}
