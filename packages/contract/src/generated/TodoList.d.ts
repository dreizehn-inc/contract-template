/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface TodoListInterface extends ethers.utils.Interface {
  functions: {
    "createTask(string)": FunctionFragment;
    "taskCount()": FunctionFragment;
    "tasks(uint256)": FunctionFragment;
    "toggleIsCompleted(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "createTask", values: [string]): string;
  encodeFunctionData(functionFragment: "taskCount", values?: undefined): string;
  encodeFunctionData(functionFragment: "tasks", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "toggleIsCompleted",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "createTask", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "taskCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tasks", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "toggleIsCompleted",
    data: BytesLike
  ): Result;

  events: {
    "Created(uint256,string)": EventFragment;
    "UpdateIsCompleted(uint256,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Created"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateIsCompleted"): EventFragment;
}

export type CreatedEvent = TypedEvent<
  [BigNumber, string] & { id: BigNumber; content: string }
>;

export type UpdateIsCompletedEvent = TypedEvent<
  [BigNumber, boolean] & { id: BigNumber; completed: boolean }
>;

export class TodoList extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TodoListInterface;

  functions: {
    createTask(
      _content: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    taskCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    tasks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, boolean] & { content: string; isCompleted: boolean }>;

    toggleIsCompleted(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  createTask(
    _content: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  taskCount(overrides?: CallOverrides): Promise<BigNumber>;

  tasks(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, boolean] & { content: string; isCompleted: boolean }>;

  toggleIsCompleted(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createTask(_content: string, overrides?: CallOverrides): Promise<void>;

    taskCount(overrides?: CallOverrides): Promise<BigNumber>;

    tasks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, boolean] & { content: string; isCompleted: boolean }>;

    toggleIsCompleted(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Created(uint256,string)"(
      id?: null,
      content?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { id: BigNumber; content: string }
    >;

    Created(
      id?: null,
      content?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { id: BigNumber; content: string }
    >;

    "UpdateIsCompleted(uint256,bool)"(
      id?: null,
      completed?: null
    ): TypedEventFilter<
      [BigNumber, boolean],
      { id: BigNumber; completed: boolean }
    >;

    UpdateIsCompleted(
      id?: null,
      completed?: null
    ): TypedEventFilter<
      [BigNumber, boolean],
      { id: BigNumber; completed: boolean }
    >;
  };

  estimateGas: {
    createTask(
      _content: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    taskCount(overrides?: CallOverrides): Promise<BigNumber>;

    tasks(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    toggleIsCompleted(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createTask(
      _content: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    taskCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tasks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toggleIsCompleted(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
